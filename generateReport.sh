#!/bin/bash

# Generates a report based on the computation results generated by executeAnalysis.sh
# One separate html report per each sample (i.e. per fastq/fastq pair)

# Exit if any of these commands fail
set -e


outDir=$1
primerBedFile=$2
performQConly=$3
platform=$4
sampleName=$5

if [[ -z $7 ]]; then
	singlefilename=$6
else
	R1filename=$6
	R2filename=$7	
fi


# Import sample metadata to be used in the report from NCBI/SRA
if [[ $platform == Illumina ]]; then
	if [[ -n $singlefilename ]]; then
		srrNumber=`basename ${singlefilename%_*}`
	else
		srrNumber=`basename ${R1filename%_*}`
	fi
else
	srrNumber=`basename ${singlefilename%.fastq*}`
fi


echo Metadata fetch is being attempted via Entrez-Direct...
sraQueryResult=$(esearch -db sra -query $srrNumber)
if [[ ${srrNumber:0:3} == 'SRR' ]]; then
	if echo $sraQueryResult | grep -q "<Count>1</Count>"; then
		echo Downloading and parsing metadata for $srrNumber...	
		
		# Get runinfo
		SRRmetadata=`echo $sraQueryResult | efetch --format runinfo | grep $srrNumber`

		# Get biosample 
		SAMN=`echo $SRRmetadata | awk -F ',' '{print $26}'`

		# Get metadata out of biosample db
		SAMNmetadata=`efetch -db biosample -id $SAMN`
		
		libraryProtocol=`echo $SRRmetadata | awk -F ',' '{print $13}'`
		seqInstrument=`echo $SRRmetadata | awk -F ',' '{print $20}'`
		isolate=`echo $SRRmetadata  | awk -F ',' '{print $30}'`	
		
		collectionDate=`echo $SAMNmetadata | grep "collection date" | awk -F '"' '{print $2}'`
		collectedBy=`echo $SAMNmetadata | grep "collected by" | awk -F '"' '{print $2}'`
		sequencedBy=`echo $SAMNmetadata | grep SEQUENCED_BY | awk '{ $1=""; print $0 }')`
		sampleLatitude=`echo $SAMNmetadata | grep "latitude and longitude" | awk -F '"' '{print $2}'\
							| awk '{ print $1$2 }'`
		sampleLongitude=`echo $SAMNmetadata | grep "latitude and longitude" | awk -F '"' '{print $2}'\
							| awk '{ print $3$4 }'`
		sampleLocation=`echo $SAMNmetadata | grep "geographic location" | awk -F '"' '{print $2}'`
	fi
fi

if [[ -z "$SAMN" ]]; then
	echo No SRA metadata was available for $srrNumber
	SAMN=Missing
	libraryProtocol=Missing
	seqInstrument=Missing
	isolate=Missing
	collectionDate=Missing
	collectedBy=Missing
	sequencedBy=Missing
	sampleLatitude=0
	sampleLongitude=0
	sampleLocation=NA
fi



#######################################################
# Prepare an html report. The html file header and standard page banner are copied from a stored file for simplicity.
reportFile=$outDir/report/report.html
mkdir $outDir/report
mv $outDir/*.png $outDir/report/
cp ./htmlHeader.html $reportFile


#######################################################
IFS='.' read -ra username <<< "$USER"
fullName="${username[0]} ${username[1]}"
timestamp=`date +%Y-%m-%d,\ %T\ %Z`


echo "<table>" >> $reportFile
echo "<tr>" >> $reportFile
echo "    <td>Sample name:</td><td>$sampleName</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Date generated:</td><td>$timestamp</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Executed by:</td><td>$fullName (<a href=\"mailto:$USER@$organisation?subject=Wastewater report generated on $timestamp\">$USER@$organisation</a>)</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

#echo "<tr>" >> $reportFile
#echo "    <td>Executed on:</td><td>`hostname -I | awk '{ print $1 }'` (aka `hostname`)</td>" | tee -a $reportFile
#echo "</tr>" >> $reportFile
echo "</table>" >> $reportFile



#######################################################
# Collection of read statistics
samtools stats $outDir/sorted.bam | grep ^SN | cut -f 2- > $outDir/sorted.stats
rm $outDir/sorted.bam
numAligned=`cat $outDir/sorted.stats | grep "reads mapped:" | awk '{ print $NF }'`
avgQuality=`cat $outDir/sorted.stats | grep "average quality" | awk '{ print $NF }'`
avgLength=`cat $outDir/sorted.stats | grep "average length" | awk '{ print $NF }'`

samtools stats $outDir/resorted.bam | grep ^SN | cut -f 2- > $outDir/resorted.stats
rm $outDir/resorted.bam
numPassedQuality=`cat $outDir/resorted.stats | grep "raw total sequences" | awk '{ print $4 }'`
avgQualityPassed=`cat $outDir/resorted.stats | grep "average quality" | awk '{ print $NF }'`
avgLengthPassed=`cat $outDir/resorted.stats | grep "average length" | awk '{ print $NF }'`
avgCoveragePassed=`expr $avgLengthPassed \* $numPassedQuality / 29903`


# Deduce the total number of reads from the kraken2 output
numUnclassified=`head $outDir/k2-std.out | grep -w unclassified | awk '{ print $2 }'`
if [[ -z $numUnclassified ]]; then
	numUnclassified=0
fi

numClassified=`head $outDir/k2-std.out | grep -w root | awk '{ print $2 }'`
if [[ -z $numClassified ]]; then
	numClassified=0
fi

# Calculation of total number of reads
let "numReads=$numUnclassified + $numClassified"
if [[ -z $singlefilename ]]; then
	# Correction for undercounting by kraken2 in the paired mode
	let "numReads=2*$numReads"
fi


####################################################################
echo >> $reportFile
echo "<br>" >> $reportFile
echo "<h2>Sequencing summary</h2>" >> $reportFile
echo '<table>' >> $reportFile


echo "<tr>" >> $reportFile
echo "    <td>Sequencing chemistry:</td><td>$libraryProtocol with $seqInstrument</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile


# Catchment site the sample was collected from
echo "<tr>" >> $reportFile
echo "    <td>Source site:</td><td><a href=\"https://www.openstreetmap.org/#map=3/$latitude/$longitude\">$sampleLocation\
		($sampleLatitude,$sampleLongitude)</a></td>" | tee -a $reportFile
echo "</tr>" >> $reportFile	

# Date the WW sample was collected from the sanitary system
echo "<tr>" >> $reportFile
echo "    <td>Sampling date:</td><td>$collectionDate</a></td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

# Agency collecting the WW sample
echo "<tr>" >> $reportFile
echo "    <td>Collected by:</td><td>$collectedBy</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

# Lab that sequenced the sample
echo "<tr>" >> $reportFile
echo "    <td>Sequenced by:</td><td>$sequencedBy</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Total number of reads:</td><td>$numReads</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Reads aligned:</td><td>$numAligned (`expr 100 \* $numAligned / $numReads`%)</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Average read quality:</td><td>$avgQuality</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Average read length:</td><td>$avgLength</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Reads passing filter:</td><td>$numPassedQuality (`expr 100 \* $numPassedQuality / $numReads`%)</td>" \
		| tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Average read quality passing filter:</td><td>$avgQualityPassed</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Average read length passing filter:</td><td>$avgLengthPassed</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Average coverage passing filter:</td><td>${avgCoveragePassed}X</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile
echo "</table>" >> $reportFile

echo "<br>" >> $reportFile
echo "A read passes filter if the read length after adaptor trimming &#8805; 30 and minimum \
		read quality &#8805; 20 within a sliding window of width 4." >> $reportFile



#######################################################
echo >> $reportFile
echo "<br><br>" >> $reportFile
echo "<h2>Overall sequence characteristics</h2>" >> $reportFile


echo "<img src=\"./coverage.png\" alt=\"Coverage vs. genome coordinate plot\" width=\"49%\" class=\"center\">" >> $reportFile
echo "<img src=\"./quality.png\" alt=\"Quality vs. genome coordinate plot\" width=\"49%\" class=\"center\">" >> $reportFile
echo "<p> NOTE: The red shaded areas marked with a (<font color="red">*</font>) are not covered by the design of the library preparation kit and hence excluded from analyses." | tee -a $reportFile
echo "<br><br><br><br>" >> $reportFile
echo "<img src=\"./depthHistogram.png\" alt=\"Coverage histogram\" width=\"49%\" class=\"center\">" >> $reportFile
echo "<img src=\"./qualityHistogram.png\" alt=\"Quality histogram\" width=\"49%\" class=\"center\">" >> $reportFile
echo >> $reportFile
echo "<br>" >> $reportFile

# Check for coverage data. If the coverage is too low, any variant calling will be inaccurate
if [ $avgCoveragePassed -lt 10 ]; then
	echo "<p> <font color=\"red\"> WARNING: The sequence coverage is very low (${avgCoveragePassed}X) </font>" | tee -a $reportFile
fi



numUncoveredLociByDesign=0
gapfilename=${primerBedFile%.*}.uncovered
while IFS= read -r line; do
	gapBegin=`echo $line | awk '{ print $1 }'`
	gapEnd=`echo $line | awk '{ print $2 }'`
	let "numUncoveredLociByDesign+=$gapEnd - $gapBegin + 1"
done < $gapfilename
numUncoveredLoci=`cat $outDir/pos-coverage-quality.tsv | awk '{ print $2 }' | grep -w 0 | wc -l`
numPoorlyCoveredLoci=`cat $outDir/pos-coverage-quality.tsv | awk '{ print $2 }' |
						grep -w -e 0 -e 1 -e 2 -e 3 -e 4 -e 5 -e 6 -e 7 -e 8 -e 9 | wc -l`

numCovid=`cat $outDir/k2-std.out | grep Orthocoronavirinae | grep -v unclass | awk '{ print $2 }'`
numHuman=`cat $outDir/k2-std.out | grep sapiens | awk '{ print $2 }'`
numSynthetic=`cat $outDir/k2-std.out | grep other | grep 28384 | awk '{ print $2 }'`

if [[ -z $numCovid ]]; then
	pctCovid=0
	numCovid=0
else
	pctCovid=`cat $outDir/k2-std.out | grep Orthocoronavirinae | grep -v unclass | awk '{ print $1 }'`
fi

if [[ -z $numHuman ]]; then
	pctHuman=0
	numHuman=0
else
	pctHuman=`cat $outDir/k2-std.out | grep sapiens | awk '{ print $1 }'`
fi

if [[ -z $numSynthetic ]]; then
	pctSynthetic=0
	numSynthetic=0
else
	pctSynthetic=`cat $outDir/k2-std.out | grep other | grep 28384 | awk '{ print $1 }'`
fi


echo '<table>' >> $reportFile
echo "<tr>" | tee -a $reportFile
echo "    <td># uncovered genomic coordinates (0X) by kit design:</td><td>$numUncoveredLociByDesign nt 
		(`expr 100 \* $numUncoveredLociByDesign / 29903`%)</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td># uncovered genomic coordinates (0X):</td><td>$numUncoveredLoci nt (`expr 100 \* $numUncoveredLoci / 29903`%)</td>" \
		| tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td># poorly covered genomic coordinates (<10X):</td><td>$numPoorlyCoveredLoci nt (`expr 100 \* $numPoorlyCoveredLoci / 29903`%)</td>" \
		| tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Hits to SARS-Cov2 genome (kraken2):</td><td>$numCovid reads (${pctCovid}%) </td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Hits to human genome (kraken2):</td><td>$numHuman reads (${pctHuman}%)</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile

echo "<tr>" >> $reportFile
echo "    <td>Hits to synthetic sequences (kraken2, taxid 28384):</td><td>$numSynthetic reads (${pctSynthetic}%)</td>" | tee -a $reportFile
echo "</tr>" >> $reportFile
echo "</table>" >> $reportFile



if ! $performQConly; then
	echo Deconvolution-based estimation of the proportion of covid variants
	mostAbundantVariantPct=`cat $outDir/deconvolution.output $deconvolutionOutput | awk '{ print $1 }'`
	mostAbundantVariantName=`cat $outDir/deconvolution.output $deconvolutionOutput | awk '{ print $2 }'`
	linRegressionR2=`cat $outDir/deconvolution.output $deconvolutionOutput | awk '{ print $3 }'`


	# Characterisation of the consensus sequence based on Pangolin output
	# Calculation of the consensus sequence is used to determine the predominant lineage.
	# If available, use the WHO label.
	consensusLineage=`tail -n 1 $outDir/pangolin_lineage_report.csv | awk -F "," '{ print $2 }'`
	WHOlabel=`cat ./pangolin2WHOlabel.txt | grep $consensusLineage | awk -F " " '{ print $2 }'`
	if  [[ -n $WHOlabel ]]; then
		consensusLineage=$WHOlabel
	fi


	dominantVariantNameKallisto=`cat $outDir/kallisto.out | sort -k 2 -n | tail -n 1 | awk '{ print $1 }'`
	echo "<br>" >> $reportFile
	echo "<h2>Detected variants (Experimental)</h2>" >> $reportFile
	echo "<div>" >> $reportFile
	echo "    <div id=\"figdiv\">" >> $reportFile
	echo "        <img src=\"./pieChart_deconvolution.png\" alt=\"Abundance of variants by deconvolution\" width=\"100%\">" >> $reportFile
	echo "    </div>" >> $reportFile
	echo "    <div id=\"figdiv\">" >> $reportFile
	echo "        <img src=\"./pieChart_kallisto.png\" alt=\"Abundance of variants by kallisto\" width=\"100%\">" >> $reportFile
	echo "    </div>" >> $reportFile
	echo "</div>" >> $reportFile

	echo "<div id=\"caption\">" >> $reportFile
	echo "    <p> Based on deconvolution, <a href=\"https://outbreak.info/situation-reports?pango=$mostAbundantVariantName\">$mostAbundantVariantName</a> 
		is estimated to constitute $mostAbundantVariantPct% of the viral\
		particles and hence is the most abundant variant in the sample. The R<sup>2</sup> for the linear regression was $linRegressionR2.\
		Variants that were detected less than 5% were grouped under \"Other\"" | tee -a $reportFile
	echo "    <p> Based on the consensus sequence of the observed reads, the \"ensemble-averaged sequence\" most closely resembles \
		the <a href=\"https://outbreak.info/situation-reports?pango=$consensusLineage\">$consensusLineage</a> lineage. \
		If this is a sample consisting of a single source of pathogens or an overwhelming majority of the different sources \
		are infected with the same variant, the sample is dominated by this variant." | tee -a $reportFile
	echo "    <p> Based on mapping individual reads to the variant consensus sequences in the reference database, \
		kallisto predicts that the sample is dominated by <a href=\"https://outbreak.info/situation-reports?pango=$dominantVariantNameKallisto\"\
		>$dominantVariantNameKallisto</a> lineage. Accuracy of this measure is expected to improve if the \
		input data consists of long reads as opposed to convolution." | tee -a $reportFile
	echo "</div>" >> $reportFile
	echo "<br>" >> $reportFile

	echo "<br>" >> $reportFile
	echo "<div>" >> $reportFile
	echo "    <div id=\"figdiv\">" >> $reportFile
	echo "        <img src=\"./pieChart_k2_allCovid.png\" alt=\"Abundance of variants by kraken2+bracken\"\
						width=\"100%\">" >> $reportFile
	echo "    </div>" >> $reportFile
	echo "    <div id=\"figdiv\">" >> $reportFile
	echo "        <img src=\"./pieChart_k2_majorCovid.png\" alt=\"Abundance of variants by kraken2+bracken\"\
						width=\"100%\">" >> $reportFile
	echo "    </div>" >> $reportFile
	echo "</div>" >> $reportFile
	echo "<br>" >> $reportFile


	echo "<br>" >> $reportFile
	echo "<div>" >> $reportFile
	echo "    <div id=\"figdiv\">" >> $reportFile
	echo "        <img src=\"./pieChart_freyja.png\" alt=\"Abundance of variants by Freyja\"\
						width=\"50%\">" >> $reportFile
	echo "    </div>" >> $reportFile
	echo "</div>" >> $reportFile
	echo "<br>" >> $reportFile



	# Append the VOC - VOI support table generated by the above Python script to the report
	cat $outDir/VOC-VOIsupportTable.html >> $reportFile
	rm $outDir/VOC-VOIsupportTable.html
fi



#######################################################
echo Appending a detailed list of all detected mutations...
echo >> $reportFile
echo "<h2>Detected mutations</h2>" >> $reportFile
echo "Only genomic coordinates with at least ${minDepthThreshold}X coverage were considered." >> $reportFile
echo "<br>" >> $reportFile

echo "<table>" >> $reportFile
echo "<tr>" >> $reportFile
echo "    <th>Position</th> <th>Ref. base</th> <th>Alt. base</th> <th>Alt. freq</th> <th>p-value</th> <th>Mutation name</th> <th>Compatible lineages</th>" >> $reportFile
echo "</tr>" >> $reportFile
# Copy the list of mutations from the temporary file generated by python
cat $outDir/mutationTable.html >> $reportFile
rm $outDir/mutationTable.html
echo "</table>" >> $reportFile
echo "<br>" >> $reportFile



#######################################################
echo Appending a list of data analysis parameters...
echo >> $reportFile
echo "<h2>Software configuration</h2>" >> $reportFile

pangolinVersion=`pangolin -v`
pangolearnVersion=`pangolin -pv`


if [[ -n "$singlefilename" ]]; then
	echo "Minimap2:" `minimap2 --version` >> $reportFile
else
	echo "Bowtie2 v`bowtie2 --version | head -n 1 | awk '{ print $3 }'`, " >> $reportFile
fi

echo `samtools --version | head -n 2`", " >> $reportFile
echo `ivar version | head -n 1`", " >> $reportFile
echo `kraken2 -v | head -n 1`", " >> $reportFile
echo `kallisto version`"." >> $reportFile


variantDBfile=./covidRefSequences/varDefinitions.pkl
allIncludedLineages=`./listVariantsAvail.py $variantDBfile`
echo "Lineage definitions were compiled on" `date +%Y-%m-%d -r ./covidRefSequences/varDefinitions.pkl` \
		"from <a href=\"https://github.com/cov-lineages/constellations/tree/main/constellations/definitions\">constellations</a>." >> $reportFile
echo "Lineage signature file was compiled on" `date +%Y-%m-%d -r $variantDBfile` \
		"and includes lineages: $allIncludedLineages." >> $reportFile
echo "Lineage assignment to the consensus sequence was performed by $pangolinVersion using the classification tree of $pangolearnVersion." >> $reportFile

echo >> $reportFile
echo "</body>" >> $reportFile
echo "</html>" >> $reportFile	



##################################################################
# Add the sample name as prefix to all files generated.
for file in $(ls $outDir); do
	mv $outDir/$file $outDir/${sampleName}_${file}
done
 
